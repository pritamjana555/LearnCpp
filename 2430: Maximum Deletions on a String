class Solution {
public:
const int MOD = 1e9 + 7;
const int BASE = 31;  // Prime base for hashing
// Function to compute rolling hash
vector<long long> computeHashes(const string &s, vector<long long> &power) {
    int n = s.length();
    vector<long long> hash(n + 1, 0);
    
    for (int i = 0; i < n; i++) {
        hash[i + 1] = (hash[i] * BASE + (s[i] - 'a' + 1)) % MOD;
    }

    // Precompute power of BASE
    power[0] = 1;
    for (int i = 1; i <= n; i++) {
        power[i] = (power[i - 1] * BASE) % MOD;
    }

    return hash;
}

// Function to get hash value of s[l:r] (0-based indexing)
long long getHash(int l, int r, const vector<long long> &hash, const vector<long long> &power) {
    long long h = (hash[r + 1] - (hash[l] * power[r - l + 1]) % MOD + MOD) % MOD;
    return h;
}

    int deleteString(string s) {
         int n = s.length();
    vector<int> dp(n + 1, 0);
    vector<long long> power(n + 1);
    
    // Compute hashes
    vector<long long> hash = computeHashes(s, power);

    // DP from the end of the string
    for (int i = n - 1; i >= 0; i--) {
        dp[i] = 1; // At minimum, we can delete the entire remaining string
        
        for (int len = 1; i + 2 * len <= n; len++) {
            if (getHash(i, i + len - 1, hash, power) == getHash(i + len, i + 2 * len - 1, hash, power)) {
                dp[i] = max(dp[i], 1 + dp[i + len]);
            }
        }
    }

    return dp[0];
    }
};
